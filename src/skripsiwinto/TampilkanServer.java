/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package skripsiwinto;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.nio.charset.StandardCharsets;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;


/**
 *
 * @author Winto Junior Khosasi
 */
public class TampilkanServer extends javax.swing.JDialog {

    /**
     * Creates new form TampilkanServer
     */
    private final TampilanClient form;
    private final LinkedList<containerHostConfig> hostList;
    private int index;
    private int maxCore = 4;
    public TampilkanServer(TampilanClient obj , String title,LinkedList<containerHostConfig> hostList) {
        super(obj,title);
        this.hostList = hostList;
        this.form = obj;
        initComponents();
        jTable1.getTableHeader().setDefaultRenderer(new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                setBackground(new Color(0, 71, 171,150));
                setForeground(Color.WHITE);
                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column); //To change body of generated methods, choose Tools | Templates.
            }            
        });
        jScrollPane1.getViewport().setBackground(new Color(0, 71, 171,100));
        this.getContentPane().setBackground(new Color(0, 200, 0));
        for(containerHostConfig item : hostList){
            comboBoxIP.addItem(item.getHostname());
        }
        textFieldCoreR.setText(String.valueOf(hostList.getFirst().getCore()));
        index = comboBoxIP.getSelectedIndex();
    }
    
    public void refreshList(containerHostConfig[] arr){
        int i = 0;
        Object[][] temp = new Object[arr.length][2];
        for(containerHostConfig item : arr){
            temp[i][0] = item.getHostname();
            temp[i++][1] = item.getCore();
        }
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                temp,
                new String[]{
                    "Server Address", "Core Value"
                }
        ) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.Byte.class
            };
            boolean[] canEdit = new boolean[]{
                false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        comboBoxIP.removeAllItems();
        for (containerHostConfig item : hostList) {
            comboBoxIP.addItem(item.getHostname());
        }
        textFieldCoreR.setText(String.valueOf(hostList.getFirst().getCore()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        comboBoxIP = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        textFieldCoreR = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        textFieldSetCoreR = new javax.swing.JTextField();
        buttonSetCore = new javax.swing.JButton();
        buttonRefresh = new javax.swing.JButton();
        buttonTutup = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jTable1.setBackground(new java.awt.Color(0, 0, 0));
        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 255, 215)));
        jTable1.setForeground(new java.awt.Color(0, 255, 215));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Server Address", "Core Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Byte.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(51, 255, 51));
        jScrollPane1.setViewportView(jTable1);

        comboBoxIP.setBackground(new java.awt.Color(0, 128, 0));
        comboBoxIP.setForeground(new java.awt.Color(204, 204, 204));
        comboBoxIP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxIPItemStateChanged(evt);
            }
        });

        jLabel1.setText("Ganti jumlah Core server di IP :");

        jLabel2.setText("Core Saat ini :");

        textFieldCoreR.setEditable(false);
        textFieldCoreR.setEnabled(false);
        textFieldCoreR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textFieldCoreRMouseClicked(evt);
            }
        });

        jLabel3.setText("Ganti jumlah core menjadi :");

        textFieldSetCoreR.setBackground(new java.awt.Color(0, 49, 83));
        textFieldSetCoreR.setForeground(new java.awt.Color(255, 255, 0));

        buttonSetCore.setBackground(new java.awt.Color(0, 128, 128));
        buttonSetCore.setForeground(new java.awt.Color(210, 210, 210));
        buttonSetCore.setText("OK");
        buttonSetCore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSetCoreActionPerformed(evt);
            }
        });

        buttonRefresh.setBackground(new java.awt.Color(0, 128, 128));
        buttonRefresh.setForeground(new java.awt.Color(210, 210, 210));
        buttonRefresh.setText("REFRESH");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });

        buttonTutup.setBackground(new java.awt.Color(0, 128, 128));
        buttonTutup.setForeground(new java.awt.Color(210, 210, 210));
        buttonTutup.setText("TUTUP");
        buttonTutup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonTutupMouseClicked(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 128, 128));
        jButton1.setForeground(new java.awt.Color(210, 210, 210));
        jButton1.setText("SET SELURUH HOST");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        ((AbstractDocument)textFieldSetCoreR.getDocument()).setDocumentFilter(new DocumentFilter(){
            Pattern regEx = Pattern.compile("\\d{0,3}");

            @Override
            public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {          
                Matcher matcher = regEx.matcher(text);
                if(!matcher.matches()){
                    return;
                }
                super.replace(fb, offset, length, text, attrs);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(comboBoxIP, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(textFieldCoreR)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addComponent(textFieldSetCoreR))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonSetCore)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonRefresh)
                                .addGap(18, 18, 18)
                                .addComponent(buttonTutup)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboBoxIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldCoreR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldSetCoreR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSetCore)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonRefresh)
                    .addComponent(buttonTutup))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonTutupMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonTutupMouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_buttonTutupMouseClicked

    private void comboBoxIPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxIPItemStateChanged
        JComboBox comboTemp = (JComboBox) evt.getSource();
        index = comboTemp.getSelectedIndex() < 0 ? 0 : comboTemp.getSelectedIndex();
        textFieldCoreR.setText(String.valueOf(hostList.get(index).getCore()));
    }//GEN-LAST:event_comboBoxIPItemStateChanged

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        // TODO add your handling code here:
        form.refreshScan();
    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void buttonSetCoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSetCoreActionPerformed
        if(textFieldSetCoreR.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Maaf kolom inputan core masih kosong");
        }else{
            byte newCore = Byte.parseByte(textFieldSetCoreR.getText());
            if(newCore < 0 || newCore > 255){
                JOptionPane.showMessageDialog(this, "Maaf inputan harus diantara 0 atau 255");
            }else{
                try (DatagramSocket socketUdp = new DatagramSocket()) {
                    byte[] buf = new byte[256];
                    buf = ("set core : "+newCore).getBytes(StandardCharsets.UTF_8);
                    DatagramPacket packet = new DatagramPacket(buf, buf.length, InetAddress.getByName(hostList.get(index).getHostname()), 9999);
                    socketUdp.send(packet);
                    byte backOff = 3;
                    while(backOff > 0){
                        byte[] bufRecv = new byte[256];
                        DatagramPacket packetRecv = new DatagramPacket(bufRecv,bufRecv.length);
                        socketUdp.receive(packetRecv);
                        String listenTemp = new String(packetRecv.getData(),StandardCharsets.UTF_8);
                        if(listenTemp.trim().matches("ya core diset [0-9]*")){
                            hostList.set(index, new containerHostConfig(packetRecv.getAddress().getHostAddress(),Integer.parseInt(listenTemp.trim().split("\\s")[3])));
                            form.refreshScan();
                            break;
                        }
                        backOff--;
                    }
                    
                    if(backOff <=0){
                        JOptionPane.showMessageDialog(this,"Maaf perubahan tidak berhasil , tidak ada respon dari server");
                    }
                } catch (SocketException ex) {
                    Logger.getLogger(TampilkanServer.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(TampilkanServer.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(TampilkanServer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_buttonSetCoreActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        if(textFieldSetCoreR.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Maaf kolom inputan core masih kosong");
        }else{
            byte newCore = Byte.parseByte(textFieldSetCoreR.getText());
            if(newCore < 0 || newCore > maxCore){
                JOptionPane.showMessageDialog(this, "Maaf inputan harus diantara 0 atau "+maxCore);
            }else{
                try (DatagramSocket socketUdp = new DatagramSocket()) {
                    int index = 0;
                    for (containerHostConfig item : hostList) {
                        byte[] buf;
                        buf = ("set core : " + newCore).getBytes(StandardCharsets.UTF_8);
                        DatagramPacket packet = new DatagramPacket(buf, buf.length, InetAddress.getByName(item.getHostname()), 9999);
                        socketUdp.send(packet);
                        byte backOff = 3;
                        while (backOff > 0) {
                            byte[] bufRecv = new byte[256];
                            DatagramPacket packetRecv = new DatagramPacket(bufRecv, bufRecv.length);
                            socketUdp.receive(packetRecv);
                            String listenTemp = new String(packetRecv.getData(), StandardCharsets.UTF_8);
                            if (listenTemp.trim().matches("ya core diset [0-9]*")) {
                                hostList.set(index, new containerHostConfig(packetRecv.getAddress().getHostAddress(), Integer.parseInt(listenTemp.trim().split("\\s")[3])));
                                form.refreshScan();
                                break;
                            }
                            backOff--;
                        }
                        index++;

                        if (backOff <= 0) {
                            JOptionPane.showMessageDialog(this, "Maaf perubahan pada " + item.getHostname() + " tidak berhasil , tidak ada respon dari server");
                        }
                    }
                } catch (SocketException ex) {
                    Logger.getLogger(TampilkanServer.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(TampilkanServer.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(TampilkanServer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void textFieldCoreRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textFieldCoreRMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount() == 2 && !evt.isConsumed()){
            evt.consume();
            maxCore = 255;
            JOptionPane.showMessageDialog(this, "Sekarang max core dapat diset mencapai 255");
        }
    }//GEN-LAST:event_textFieldCoreRMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonRefresh;
    private javax.swing.JButton buttonSetCore;
    private javax.swing.JButton buttonTutup;
    private javax.swing.JComboBox<String> comboBoxIP;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField textFieldCoreR;
    private javax.swing.JTextField textFieldSetCoreR;
    // End of variables declaration//GEN-END:variables
}
